name: Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Android SDK (Linux / macOS)
        if: runner.os != 'Windows'
        run: |
          ANDROID_SDK_ROOT="$HOME/Android/Sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ "$(uname)" = "Darwin" ]; then
            CLI_ZIP="commandlinetools-mac-9477386_latest.zip"
          else
            CLI_ZIP="commandlinetools-linux-9477386_latest.zip"
          fi
          curl -sSL "https://dl.google.com/android/repository/$CLI_ZIP" -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest" || true
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-33" "build-tools;33.0.0"
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

        - name: Install Android SDK (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:ANDROID_SDK_ROOT = "$env:USERPROFILE\Android\Sdk"
          New-Item -ItemType Directory -Force -Path "$env:ANDROID_SDK_ROOT\cmdline-tools" | Out-Null
          $url = "https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip"
          $zip = "cmdline-tools.zip"
          Invoke-WebRequest -UseBasicParsing -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath "$env:ANDROID_SDK_ROOT\cmdline-tools"
          Move-Item -Force "$env:ANDROID_SDK_ROOT\cmdline-tools\cmdline-tools" "$env:ANDROID_SDK_ROOT\cmdline-tools\latest"
          $sdkmanager = "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin\sdkmanager.bat"
          & $sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0"
          # Accept licenses non-interactively (emit many 'y' lines)
          1..30 | ForEach-Object { 'y' } | & $sdkmanager --licenses
          Add-Content -Path $env:GITHUB_ENV -Value "ANDROID_SDK_ROOT=$env:ANDROID_SDK_ROOT"
          Add-Content -Path $env:GITHUB_PATH -Value "$env:ANDROID_SDK_ROOT\platform-tools"
          Add-Content -Path $env:GITHUB_PATH -Value "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin"

      - name: Make gradlew executable (Unix/macOS only)
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          ./gradlew assemble

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: .\gradlew.bat assemble

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifact
          path: app/build/outputs
